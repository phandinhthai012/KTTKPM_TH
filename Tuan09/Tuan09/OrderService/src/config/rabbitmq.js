const amqp = require('amqplib');

let channel;
let connection;

async function connectRabbitMQ() {
  try {
    // K·∫øt n·ªëi t·ªõi RabbitMQ (t√™n service l√† rabbitmq trong Docker)
    connection = await amqp.connect('amqp://rabbitmq');
    channel = await connection.createChannel();

    const queue = 'customer_created';
    await channel.assertQueue(queue, { durable: true });

    console.log(`üëÇ Waiting for messages in queue: ${queue}`);
    
    channel.consume(queue, (msg) => {
      if (msg !== null) {
        const data = JSON.parse(msg.content.toString());
        console.log('üì• Received from customer_created:', data);
        // x·ª≠ l√Ω logic ·ªü ƒë√¢y

        // X√°c nh·∫≠n ƒë√£ x·ª≠ l√Ω th√¥ng ƒëi·ªáp
        channel.ack(msg);
      }
    });

    // X·ª≠ l√Ω khi k·∫øt n·ªëi ho·∫∑c k√™nh b·ªã m·∫•t
    connection.on('close', () => {
      console.log('‚ùå RabbitMQ connection closed');
      process.exit(1); // Tho√°t ch∆∞∆°ng tr√¨nh ho·∫∑c b·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i k·∫øt n·ªëi
    });

    // N·∫øu c√≥ l·ªói trong k√™nh
    channel.on('error', (err) => {
      console.error('‚ùå Channel error:', err);
    });

  } catch (error) {
    console.error('‚ùå Error connecting to RabbitMQ:', error);
    // T·ª± ƒë·ªông th·ª≠ l·∫°i sau 5 gi√¢y n·∫øu g·∫∑p l·ªói
    setTimeout(connectRabbitMQ, 5000);
  }
}

module.exports = { connectRabbitMQ };
